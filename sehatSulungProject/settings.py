"""
Django settings for sehatSulungProject project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

# settings.py
from pathlib import Path
import os
import environ
from datetime import timedelta


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-v-_b*)$++itqwkcdj@3@eae4)^g(v@+mmjh_mp41@k0+o_-z37"

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = False#os.getenv('DJANGO_DEBUG', 'False') == 'False'

# ALLOWED_HOSTS = []
ALLOWED_HOSTS = ['103.139.193.56', 'localhost', '127.0.0.1']#os.getenv('DJANGO_ALLOWED_HOSTS', '103.139.193.56:80','localhost').split(',')

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'admin_app.apps.AdminAppConfig',
    'rest_framework_simplejwt',
    "regional_data_app.apps.RegionalDataAppConfig",
    "health_data_app.apps.HealthDataAppConfig",
    "fitur_app.apps.FiturAppConfig",
    "question_app.apps.QuestionAppConfig",
    'rest_framework',
    'rest_framework.authtoken',
    "media_center_app.apps.MediaCenterAppConfig",
    "checkup_app.apps.CheckupAppConfig",
    "alamat_app.apps.AlamatAppConfig",
    'rest_framework_simplejwt.token_blacklist',

    "session_app.apps.SessionAppConfig",
    "task_app.apps.TaskAppConfig",
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    "analisis_ai.apps.AnalisisAiConfig",
    "api_app.apps.ApiAppConfig",
    "hash_app.apps.HashAppConfig"  # Sesuaikan dengan provider yang digunakan

]

# Add this for django-allauth configuration
AUTHENTICATION_BACKENDS = (
# Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

# Add site id configuration (it is used by django-allauth to store site-specific data)
SITE_ID = 1



# Redirect URLs after login/logout
LOGIN_REDIRECT_URL = '/task'
LOGOUT_REDIRECT_URL = '/accounts/login/'

# Email Configuration (optional)
# ACCOUNT_EMAIL_REQUIRED = True
# ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*', 'password1*', 'password2*']
ACCOUNT_EMAIL_VERIFICATION = 'none'
# Setting allauth
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_AUTHENTICATION_METHOD = 'email'

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.getenv("GOOGLE_CLIENT_ID")
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.getenv("GOOGLE_CLIENT_SECRET")

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication', # Opsional, jika Anda masih ingin mengizinkan sesi
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated', # Tambahkan ini untuk mengamankan semua API secara default
    ]
}
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),  # Contoh: Token berlaku 5 menit
    'REFRESH_TOKEN_LIFETIME': timedelta(days=365 * 100),   # Contoh: Refresh token berlaku 1 hari
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    # ... konfigurasi lainnya
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",

    # Add this line for allauth middleware:
    'allauth.account.middleware.AccountMiddleware',  # This line is required!
]

ROOT_URLCONF = "sehatSulungProject.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates']
        ,
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # `allauth` needs this from django
                'django.template.context_processors.request',
                # "allauth.account.context_processors.account",
                # 'allauth.socialaccount.context_processors.socialaccount',  # Harus ada
                # 'django.template.context_processors.debug',
                # "django.template.context_processors.request",
                # "django.contrib.auth.context_processors.auth",
                # "django.contrib.messages.context_processors.messages",
                #     # Context processors lainnya
                # 'allauth.account.context_processors.account',
                # 'allauth.socialaccount.context_processors.socialaccount',
            ],
        },
    },
]

WSGI_APPLICATION = "sehatSulungProject.wsgi.application"

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': ['email'],
        'AUTH_PARAMS': {'access_type': 'online'},
        'OAUTH_PKCE_ENABLED': True,
    }
}
# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }

import os

# ...

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_DB', 'sehatsulung'),         # default fallback
        'USER': os.getenv('POSTGRES_USER', 'postgres'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'superpassword'),
        'HOST': os.getenv('POSTGRES_HOST', 'db'),         # sesuai nama service docker
        'PORT': os.getenv('POSTGRES_PORT', '5432'),
    }
}




# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

import os

# print(os.getenv('CLOUDINARY_NAME'))  # Untuk memastikan variabel sudah dibaca dengan benar
# import environ

# Cek apakah file .env ada di jalur yang benar
# print("Current working directory:", os.getcwd())  # Menampilkan direktori saat ini
# print("Env file path:", os.path.exists('.env'))  # Memeriksa apakah file .env ada
# Membaca variabel dari file .env


# env = environ.Env()
# environ.Env.read_env()
# print("Cloudinary Name:", env('CLOUDINARY_NAME', default='Not Set'))  # Menampilkan nilai dari CLOUDINARY_NAME
#
# print(env('CLOUDINARY_NAME'))
#
# CLOUDINARY_STORAGE = {
#     'CLOUD_NAME': env('CLOUDINARY_NAME'),
#     'API_KEY': env('CLOUDINARY_API_KEY'),
#     'API_SECRET': env('CLOUDINARY_API_SECRET'),
# }
#
# DEFAULT_FILE_STORAGE = 'cloudinary.storage.MediaCloudinaryStorage'

import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.getenv('CLOUDINARY_NAME'),
    'API_KEY': os.getenv('CLOUDINARY_API_KEY'),
    'API_SECRET': os.getenv('CLOUDINARY_API_SECRET'),
}

DEFAULT_FILE_STORAGE = 'cloudinary.storage.MediaCloudinaryStorage'
# print(os.getenv('CLOUDINARY_NAME'))
